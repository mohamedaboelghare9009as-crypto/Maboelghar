// Add this to your existing AppointmentBooking component or create as a separate component
import React, { useState } from 'react';
import { supabase, doctorService } from '../../lib/supabase';
import { Database, CheckCircle, XCircle, Loader2 } from 'lucide-react';

export function ConnectionTest() {
  const [testing, setTesting] = useState(false);
  const [result, setResult] = useState<{
    success: boolean;
    message: string;
    details: any;
  } | null>(null);

  const testConnection = async () => {
    setTesting(true);
    setResult(null);

    try {
      // Test 1: Check environment variables
      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
      const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

      if (!supabaseUrl || !supabaseKey) {
        setResult({
          success: false,
          message: 'Environment variables missing',
          details: {
            url: supabaseUrl ? 'Found' : 'Missing',
            key: supabaseKey ? 'Found' : 'Missing'
          }
        });
        return;
      }

      // Test 2: Check Supabase client
      if (!supabase) {
        setResult({
          success: false,
          message: 'Supabase client not initialized',
          details: { client: 'Failed to create' }
        });
        return;
      }

      // Test 3: Try to fetch doctors
      const doctors = await doctorService.getAllDoctors();
      
      setResult({
        success: true,
        message: 'Database connection successful!',
        details: {
          doctorsFound: doctors.length,
          firstDoctor: doctors[0]?.name || 'None',
          url: supabaseUrl.substring(0, 30) + '...',
          timestamp: new Date().toISOString()
        }
      });

    } catch (error: any) {
      setResult({
        success: false,
        message: 'Connection failed',
        details: {
          error: error.message || error.toString(),
          code: error.code || 'Unknown'
        }
      });
    } finally {
      setTesting(false);
    }
  };

  return (
    <div className="bg-white border rounded-lg p-4 mb-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Database className="h-5 w-5 text-blue-600" />
          <h3 className="font-semibold">Database Connection Test</h3>
        </div>
        
        <button
          onClick={testConnection}
          disabled={testing}
          className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {testing && <Loader2 className="h-4 w-4 animate-spin" />}
          <span>Test Connection</span>
        </button>
      </div>

      {result && (
        <div className={`p-4 rounded-lg border-2 ${
          result.success 
            ? 'bg-green-50 border-green-200' 
            : 'bg-red-50 border-red-200'
        }`}>
          <div className="flex items-center space-x-2 mb-2">
            {result.success ? (
              <CheckCircle className="h-5 w-5 text-green-600" />
            ) : (
              <XCircle className="h-5 w-5 text-red-600" />
            )}
            <span className="font-medium">{result.message}</span>
          </div>
          
          <div className="text-sm text-gray-600">
            <pre className="bg-gray-100 p-2 rounded text-xs overflow-x-auto">
              {JSON.stringify(result.details, null, 2)}
            </pre>
          </div>
        </div>
      )}
    </div>
  );
}